import{t as h,a as b}from"./redux-saga-effects.esm-CmDjhKgN.js";import{aa as m,ab as r,ac as c,ad as n,ae as y,af as E}from"./main-zFq7zC_h.js";import{githubActions as o}from"./index-DflTBXhF.js";const P=t=>t.github.cardEntries.cards,C=t=>t.github.cardEntries.entities,$=t=>t.github.select,q=t=>t.api.getGithubCards.status==="pending",G=t=>e=>e.github.cardEntries.entities[t],S=(t,e)=>{const a=new Map;let s;return function(...i){a.has(i[0])&&(clearTimeout(a.get(i[0])),a.delete(i[0])),s=setTimeout(()=>t(...i),e),a.set(i[0],s)}},x=(t,e)=>m({params:{...e,id:t}}),f=S(x,500),D=r("github.incrementReaction");function*_(t){try{const{id:e,reaction:a}=t.payload,s=yield c(C),i={...s[e],reactions:{...s[e].reactions,[a]:s[e].reactions[a]+1}};yield n(o.setCard(i)),yield y(f,e,i)}catch(e){console.error(e)}}const d={saga:_,action:D},z=r("github.initCards");function*R(){try{const t=yield y(E.endpoints.getGithubCards.initiate);yield n(o.setCards(t.data.githubCards))}catch(t){console.error(t)}}const g={saga:R,action:z},T=r("github.positionChange");function*j(t){try{const{position:e}=t.payload,{id:a,offset:s}=yield c($);if(!a)return;const i=yield c(G(a)),p={...i,position:{x:e.x+s.x-i.size.width/2,y:e.y+s.y-i.size.height/2}};yield n(o.setCard(p)),yield y(f,a,p)}catch(e){console.error(e)}}const u={saga:j,action:T},k=r("github.setDragging");function*v(t){try{const{id:e,isDragging:a}=t.payload,i={...(yield c(C))[e],isDragging:a};yield n(o.setCard(i)),yield n(o.setSelect({id:a?e:null}))}catch(e){console.error(e)}}const l={saga:v,action:k};function*w(){yield h(l.action.type,l.saga),yield h(g.action.type,g.saga),yield b(u.action.type,u.saga),yield b(d.action.type,d.saga)}const A={initCards:g,setDragging:l,positionChange:u,incrementReaction:d},B=Object.freeze(Object.defineProperty({__proto__:null,githubSagas:A,sagas:w},Symbol.toStringTag,{value:"Module"}));export{A as a,P as b,$ as c,C as d,q as e,G as g,B as i};
